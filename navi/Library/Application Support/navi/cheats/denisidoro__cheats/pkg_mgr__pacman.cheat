% pacman compares with apt, ArchLinux

# Install a package(s) by name, equal to `apt install <pkg_name>`
sudo pacman -S <pkg_name>

# Remove a package(s) by name, equal to `apt remove <pkg_name>`
sudo pacman -Rs <pkg_name_installed>

# Search for package(s), equal to `apt search <keyword>`
sudo pacman -Ss <keyword>

# Upgrade Packages, equal to `apt update` and then `apt upgrade <pkg_name>`
sudo pacman -Syu <pkg_name>

# Clean up all local caches, equal to `apt autoclean` or `apt clean`
sudo pacman -Sc

# Clean up all local caches, equal to `apt autoclean` or `apt clean`
sudo pacman -Scc

# Remove dependencies that are no longer needed, equal to `apt autoremove`
sudo pacman -Qdtq | pacman -Rs -

# Remove packages no longer included in any repositories, equal to `aptitude purge ~o`
sudo pacman -Qmq | pacman -Rs -

# Mark a package previously installed as a dependency as explicitly required, equal to `apt-mark manual <pkg_name>`
sudo pacman -D --asexplicit <pkg_name>

# Install package(s) as dependency / without marking as explicitly required, equal to `apt-mark auto <pkg_name>`
sudo pacman -S --asdeps <pkg_name>

# Only downloads the given package(s) without unpacking or installing them, equal to `apt install --download-only <pkg_name>` or `apt download <pkg_name>`
sudo pacman -Sw <pkg_name>

# Show a log of actions taken by the software management, equal to `less /var/log/dpkg.log`
sudo less /var/log/pacman.log

# Get a dump of the whole system information, equal to `apt-cache stats`
sudo less /var/lib/pacman/local

# Show all or most information about a package, equal to `apt show <pkg_name>` or `apt-cache policy <pkg_name>`
sudo pacman -Si <pkg_name>

# Show all or most information about a package, equal to `apt show <pkg_name>` or `apt-cache policy <pkg_name>`
sudo pacman -Qi <pkg_name>

# Display local package information, equal to `dpkg -s <pkg_name>` or `aptitude show <pkg_name>`
sudo pacman -Qi <pkg_name>

# Display remote package information, equal to `apt-cache show <pkg_name>` or `aptitude show <pkg_name>`
sudo pacman -Si <pkg_name>

# Display files provided by local package, equal to `dpkg -L <pkg_name>`
sudo pacman -Ql <pkg_name>

# Display files provided by a remote package, equal to `apt-file list <pkg_name>`
sudo pacman -Fl <pkg_name>

# Query the package which provides file, equal to `dpkg -S <file_name>` or `dlocate <file_name>`
sudo pacman -Qo <file_name>

# List the files that the package holds, equal to `dpkg-query -L <pkg_name>`
sudo pacman -Ql <pkg_name>

# List the files that the package holds, equal to `dpkg-query -L <pkg_name>`
sudo pacman -Fl <pkg_name>

# Displays packages which provide the given exp. aka reverse provides, equal to `apt-file search <pkg_name>`
sudo pacman -F <pkg_name>

# Search all packages to find the one which holds the specified file, equal to `apt-file search <file_name>`
sudo pacman -F <file_name>

# Show the changelog of a package, equal to `apt-get changelog <pkg_name>`
sudo pacman -Qc <pkg_name>

# Lists packages which have an update available, equal to `apt-get upgrade <- N`
sudo pacman -Qu

# Display a list of all packages in all installation sources that are handled by the packages management, equal to `apt-cache dumpavail` or `apt-cache dump`(Cache only) or `apt-cache pkgnames`
sudo pacman -Sl

# Generates a list of installed packages, equal to `dpkg --list | grep ^i`
sudo pacman -Q

# List packages that are installed but are not available in any installation source (anymore), equal to `deborphan`
sudo pacman -Qm

# List installed local packages along with version, equal to `dpkg -l`
sudo pacman -Q

# Search locally installed package for names or descriptions, equal to `aptitude search ~i(~n $name|~d $description)`
sudo pacman -Qs <keyword>

# List packages not required by any other package, equal to `deborphan -anp1`
sudo pacman -Qt

# List packages installed explicitly (not as dependencies), equal to `apt-mark showmanual`
sudo pacman -Qe

# List packages installed automatically (as dependencies), equal to `apt-mark showauto`
sudo pacman -Qd

# Display packages which require X to be installed, equal to `apt-cache rdepends <pkg_name>` or `aptitude search ~D$pattern`
sudo pacman -Sii <pkg_name>

# List all packages which are required for the given package, equal to `apt-cache depends <pkg_name>` or `apt-cache show <pkg_name>`
sudo pacman -Qi <pkg_name>

# List all packages which are required for the given package, equal to `apt-cache depends <pkg_name>` or `apt-cache show <pkg_name>`
sudo pacman -Si <pkg_name>

# Installation sources management, equal to `$EDITOR /etc/apt/sources.list`
sudo $EDITOR /etc/pacman.conf

# Add an installation source to the system, equal to `apt-cdrom add`
sudo $EDITOR /etc/pacman.conf

# Refresh the information about installation sources, equal to `apt-get update`
sudo pacman -Sy

# Prints a list of all installation sources, equal to `apt-cache policy`
less /etc/pacman.d/mirrorlist

# List all packages from a certain repo
paclist <repo>

# Add a package lock rule to keep its current state from being changed, modifying IgnorePkg array in the file, equal to `apt-mark hold <pkg_name>`
sudo $EDITOR /etc/pacman.conf

# Delete a package lock rule, modifying IgnorePkg array in the file, equal to `apt-mark unhold <pkg_name>`
sudo $EDITOR /etc/pacman.conf

# Show a listing of all lock rules, equal to `less /etc/apt/preferences`
less /etc/pacman.conf

# Set the priority of the given package to avoid upgrade, force downgrade or to overwrite any default behavior, modifying HoldPkg and/or IgnorePkg arrays, equal to `$EDITOR /etc/apt/preferences` or `apt-cache policy`
sudo $EDITOR /etc/pacman.conf

# Verify package(s), equal to `debsums`
sudo pacman -Qk

# Reinstall given package, equal to `apt install --reinstall <pkg_name_installed>`
sudo pacman -S <pkg_name_installed>

# Verify dependencies of the complete system, equal to `apt-get check`
sudo pacman -Dk

# Use some magic to fix broken dependencies in a system for pacman dependency level, equal to `apt-get --fix-broken && aptitude install`
sudo pacman -Dk

# Use some magic to fix broken dependencies in a system for shared library level, equal to `apt-get --fix-broken && aptitude install`
findbrokenpkgs # from AUR

# Use some magic to fix broken dependencies in a system for shared library level, equal to `apt-get --fix-broken && aptitude install`
lddd # from devtools

# Query a package supplied on the command line rather than an entry in the package management database, equal to `dpkg -I <pkg_name>`
sudo pacman -Qp <pkg_name>

# List the contents of a package file, equal to `dpkg -c <pkg_name>`
sudo pacman -Qpl <pkg_name>

# Install local package file, equal to `apt install <pkg_file>`
sudo pacman -U <pkg_file>

# Updates package(s) with local packages and uses the installation sources to resolve dependencies, equal to `debi <pkg_file>`
sudo pacman -U <pkg_file>

# Add a local package to the local package cache mostly for debugging purposes, equal to `apt-cache add <pkg_file>`
sudo cp <pkg_file> /var/cache/pacman/pkg/

# Extract a package, equal to `dpkg-deb -x <pkg_file>`
tar -xf <pkg_file>

# Install/Remove packages to satisfy build-dependencies. Uses information in the source package, equal to `apt-get build-dep`
makepkg -seoc # Please use this with [ABS](https://wiki.archlinux.org/index.php/Arch_Build_System)

# Download the corresponding source package(s) to the given package name(s), equal to `apt-get source` or `debcheckout`
makepkg -o # Please use this with [ABS](https://wiki.archlinux.org/index.php/Arch_Build_System)

# Build a package, equal to `debuild`
makepkg -s

# Check for possible packaging issues, equal to `lintian`
namcap

$ pkg_name_installed: sudo pacman -Qe
