<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>

    <head>
        <name>C</name> <!-- The definitions title -->
        <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@]]></charsintokens> <!-- Valid Characters for Variables -->
        <!-- <charsdelimitingtokens></charsdelimitingtokens> -->
    </head>

    <states>
        <default id="Base" scope="meta.default">

            <keywords id="FunctionRegex" useforautocomplete="no" scope="language.subroutine.function">
				<regex>([A-Za-z0-9_]+ *)\(</regex>
            </keywords>

            <keywords id="C Keywords" useforautocomplete="yes" scope="keyword">
				<string>break</string>
				<string>case</string>
				<string>continue</string>
				<string>default</string>
				<string>do</string>
				<string>else</string>
				<string>enum</string>
				<string>extern</string>
				<string>for</string>
				<string>goto</string>
				<string>if</string>
				<string>NULL</string>
				<string>void</string>
				<string>return</string>
				<string>sizeof</string>
				<string>struct</string>
				<string>switch</string>
				<string>typedef</string>
				<string>union</string>
				<string>while</string>
				<string>self</string>
				<string>super</string>
				<string>int</string>
				<string>long</string>
				<string>float</string>
				<string>double</string>
				<string>char</string>
				<string>unichar</string>
				<string>unsigned</string>
				<string>signed</string>
				<string>const</string>
				<string>extern</string>
				<string>static</string>
                <string>auto</string>
                <string>register</string>
                <string>short</string>
                <string>volatile</string>
                <string>int16_t</string>
                <string>int32_t</string>
                <string>int8_t</string>
                <string>int64_t</string>
                <string>uint16_t</string>
                <string>uint32_t</string>
                <string>uint8_t</string>
                <string>uint64_t</string>
                <string>UInt32</string>
                <string>UInt16</string>
                <string>UInt8</string>
            </keywords>
            
            <keywords id="Numbers" useforautocomplete="no" scope="language.constant.numeric">
				<regex>(?&lt;![\w\d_])((?:[+-]?(?:(?:[0-9]+\.[0-9]*)|(?:\.[0-9]+))(?:[eE][+\-]?[0-9]+)?[fFlL]?)|(?:(?:(?:[1-9][0-9]*)|0[0-7]*|(?:0[xX][0-9a-fA-F]+))(?:(?:[uU][lL]?)|(?:[lL][uU]?))?))(?![\w\d_])</regex>
            </keywords>
            

            <state id="Characters" scope="language.constant.numeric.character">
                <begin><regex>'(?=\\?.')</regex></begin>
                <end><regex>(\\'')|(.')</regex></end>
            </state>
    
            <state id="Preprocessor" scope="language.preprocessor">
                <begin><regex>#</regex></begin>
                <end><regex>(?&lt;![\\])[\n\r]</regex></end>
                <keywords id="Numbers" useforautocomplete="no" scope="language.constant.numeric.preprocessor">
                    <regex>(?&lt;=[^\w\d]|^)(([+-]?(([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</regex>
                </keywords>
                <keywords id="AnglePathInPreprocessor" type="string" scope="string.angle.preprocessor">
                    <regex>(&lt;[-\w_\.]+(?:/[-\w_\.]+)*>)</regex>
                </keywords>
                <state-link state="Comment"/>
                <state id="String in Preprocessor" type="string" foldable="no" scope="string.double.preprocessor">
                    <begin><regex>"</regex></begin>
                    <end><regex>((?&lt;!\\)(\\\\)*)"</regex></end>
                </state>
                <state id="SingleComment in Preprocessor" type="comment" scope="comment.line.double-slash">
                    <begin><regex>//</regex></begin>
                    <end><regex>.(?=[\n\r])</regex></end>
                    <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
                </state>
            </state>
    
            <state id="DoxyGen Comment" type="comment" scope="comment.block.documentation">
                <begin><regex>/\*[\*\!]</regex><autoend>\*/</autoend></begin>
                <end><regex>\*/</regex></end>
                <keywords id="DoxyGen Tags" useforautocomplete="no" scope="comment.block.documentation.tag">
                    <regex>(?&lt;=[^\w\d]|^)([@\\]\w+)</regex>
                </keywords>
                <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
            </state>
    
            <state id="AutodocComment" type="comment" scope="comment.block.documentation">
                <begin><regex>/\*"</regex><autoend>"\*/</autoend></begin>
                <end><regex>\*/</regex></end>
                <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
            </state>
    
            <state id="Comment" type="comment" scope="comment.block">
                <begin><regex>/\*</regex><autoend>\*/</autoend></begin>
                <end><regex>\*/</regex></end>
                <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
           </state>
            
            <state id="SingleComment" type="comment" scope="comment.line.double-slash">
                <begin><regex>//</regex></begin>
                <end><regex>(?&lt;!\\)[\n\r]</regex></end>
                <import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
            </state>
            
            <state id="String" type="string" foldable="no" scope="string.double">
                <begin><regex>"</regex></begin>
                <end><regex>((?&lt;!\\)(\\\\)*)"</regex></end>
            </state>

            <state id="Block" type="block" foldable="yes" indent="yes" scope="meta.block.curly">
                <begin><regex>{</regex><autoend>}</autoend></begin>
                <end><regex>}</regex></end>
                <import/>
            </state>
            
        </default>
    </states>
</syntax>
