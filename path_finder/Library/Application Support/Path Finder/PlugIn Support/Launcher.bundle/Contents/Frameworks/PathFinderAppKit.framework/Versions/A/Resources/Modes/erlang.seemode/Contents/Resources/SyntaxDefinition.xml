<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
	<head>
		<name>Erlang</name>
		<charsintokens><![CDATA[_-0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@:]]></charsintokens>
        <folding toplevel="1"/>
	</head>
	<states>
		<default id="Base" scope="meta.default">
			<keywords id="Atoms" scope="string.symbol">
				<regex>\b([a-z][a-zA-Z0-9@_]*)\b</regex>
			</keywords>
			<keywords id="Records" scope="language.struct.record">
				<regex>(#[a-z][a-zA-Z0-9@_]*)\b</regex>
				<regex>-record\s*\(([a-zA-Z0-9@_]*)\b</regex>
			</keywords>
			<keywords id="Variables" scope="language.variable">
				<regex>\b([A-Z][a-zA-Z0-9@_]*)\b</regex>
			</keywords>
			<keywords id="Numbers" useforautocomplete="no" scope="language.constant.numeric">
				<regex>(?&lt;![\w\d_])((?:0*(?:(?:[0-9]#[0-9]+)|(?:[1-3][0-9]#[0-9a-zA-Z]+)))|(?:(?:(?:[0-9]+\.[0-9]+))(?:[eE][+\-]?[0-9]+)?)|[0-9]+)(?![\w\d_])</regex>
			</keywords>
			<keywords id="Keywords" casesensitive="yes" useforautocomplete="yes" scope="keyword.control">
				<string>after</string>
				<string>begin</string>
				<string>after</string>
				<string>case</string>
				<string>catch</string>
				<string>try</string>
				<string>cond</string>
				<string>end</string>
				<string>fun</string>
				<string>if</string>
				<string>orelse</string>
				<string>andalso</string>
				<string>let</string>
				<string>of</string>
				<string>query</string>
				<string>receive</string>
				<string>when</string>
			</keywords>
			<keywords id="Separators" casesensitive="no" useforautocomplete="no" scope="language.operator">
				<regex>(-&gt;)</regex>
			</keywords>
			<keywords id="List Comprehensions" casesensitive="no" useforautocomplete="no" scope="language.operator">
				<regex>(&lt;\-)</regex>
				<regex>(\|\|)</regex>
			</keywords>
			<keywords id="Built-in Functions" scope="keyword.subroutine">
				<string>abs</string>
				<string>alive</string>
				<string>apply</string>
				<string>atom_to_list</string>
				<string>binary_to_list</string>
				<string>binary_to_term</string>
				<string>concat_binary</string>
				<string>date</string>
				<string>disconnect_node</string>
				<string>element</string>
				<string>erase</string>
				<string>exit</string>
				<string>float</string>
				<string>float_to_list</string>
				<string>get</string>
				<string>get_keys</string>
				<string>group_leader</string>
				<string>halt</string>
				<string>hd</string>
				<string>integer_to_list</string>
				<string>is_alive</string>
				<string>length</string>
				<string>link</string>
				<string>list_to_atom</string>
				<string>list_to_binary</string>
				<string>list_to_float</string>
				<string>list_to_integer</string>
				<string>list_to_pid</string>
				<string>list_to_tuple</string>
				<string>load_module</string>
				<string>make_ref</string>
				<string>monitor_node</string>
				<string>node</string>
				<string>nodes</string>
				<string>now</string>
				<string>open_port</string>
				<string>pid_to_list</string>
				<string>process_flag</string>
				<string>process_info</string>
				<string>process</string>
				<string>put</string>
				<string>register</string>
				<string>registered</string>
				<string>round</string>
				<string>self</string>
				<string>setelement</string>
				<string>size</string>
				<string>spawn</string>
				<string>spawn_link</string>
				<string>split_binary</string>
				<string>statistics</string>
				<string>term_to_binary</string>
				<string>throw</string>
				<string>time</string>
				<string>tl</string>
				<string>trunc</string>
				<string>tuple_to_list</string>
				<string>unlink</string>
				<string>unregister</string>
				<string>whereis</string>
				<string>atom</string>
				<string>binary</string>
				<string>constant</string>
				<string>function</string>
				<string>integer</string>
				<string>list</string>
				<string>number</string>
				<string>pid</string>
				<string>ports</string>
				<string>port_close</string>
				<string>port_info</string>
				<string>reference</string>
				<string>record</string>
				<string>check_process_code</string>
				<string>delete_module</string>
				<string>get_cookie</string>
				<string>hash</string>
				<string>math</string>
				<string>module_loaded</string>
				<string>preloaded</string>
				<string>processes</string>
				<string>purge_module</string>
				<string>set_cookie</string>
				<string>set_node</string>
			</keywords>
			<keywords id="Functions" scope="keyword.subroutine">
				<string>acos</string>
				<string>asin</string>
				<string>atan</string>
				<string>atan2</string>
				<string>cos</string>
				<string>cosh</string>
				<string>exp</string>
				<string>log</string>
				<string>log10</string>
				<string>pi</string>
				<string>pow</string>
				<string>power</string>
				<string>sin</string>
				<string>sinh</string>
				<string>sqrt</string>
				<string>tan</string>
				<string>tanh</string>
				<string>call</string>
				<string>module_info</string>
				<string>parse_transform</string>
				<string>undefined_function</string>
			</keywords>
			<keywords id="Function Calls" scope="language.subroutine.function">
				<regex>([0-9a-zA-Z_-]+:[0-9a-zA-Z_-]+)[ \t]*\(</regex>
				<regex>([0-9a-zA-Z_-]+)[ \t]*\(</regex>
			</keywords>
			<keywords id="Directives" scope="language.preprocessor">
				<regex>(-compile)\(</regex>
				<regex>(-define)\(</regex>
				<regex>(-else)\(</regex>
				<regex>(-endif)</regex>
				<regex>(-export)\(</regex>
				<regex>(-file)\(</regex>
				<regex>(-ifdef)\(</regex>
				<regex>(-ifndef)\(</regex>
				<regex>(-import)\(</regex>
				<regex>(-include)\(</regex>
				<regex>(-include_lib)\(</regex>
				<regex>(-module)\(</regex>
				<regex>(-behaviour)\(</regex>
				<regex>(-behavior)\(</regex>
				<regex>(-record)\(</regex>
				<regex>(-undef)\(</regex>
				<regex>(-author)\(</regex>
				<regex>(-copyright)\(</regex>
				<regex>(-doc)\(</regex>
			</keywords>
			<keywords id="Processes" scope="keyword">
				<string>creation</string>
				<string>current_function</string>
				<string>dictionary</string>
				<string>group_leader</string>
				<string>heap_size</string>
				<string>high</string>
				<string>initial_call</string>
				<string>linked</string>
				<string>low</string>
				<string>memory_in_use</string>
				<string>message_queue</string>
				<string>net_kernel</string>
				<string>node</string>
				<string>normal</string>
				<string>priority</string>
				<string>reductions</string>
				<string>registered_name</string>
				<string>runnable</string>
				<string>running</string>
				<string>stack_trace</string>
				<string>status</string>
				<string>timer</string>
				<string>trap_exit</string>
				<string>waiting</string>
			</keywords>
			<keywords id="Ports" scope="keyword">
				<string>command</string>
				<string>count_in</string>
				<string>count_out</string>
				<string>creation</string>
				<string>in</string>
				<string>in_format</string>
				<string>linked</string>
				<string>node</string>
				<string>out</string>
				<string>owner</string>
				<string>packeting</string>
			</keywords>
			<keywords id="Nodes" scope="keyword">
				<string>atom_table</string>
				<string>communicating</string>
				<string>creation</string>
				<string>current_gc</string>
				<string>current_reductions</string>
				<string>current_runtime</string>
				<string>current_wall_clock</string>
				<string>distribution_port</string>
				<string>entry_points</string>
				<string>error_handler</string>
				<string>friends</string>
				<string>garbage_collection</string>
				<string>magic_cookie</string>
				<string>magic_cookies</string>
				<string>module_table</string>
				<string>monitored_nodes</string>
				<string>name</string>
				<string>next_ref</string>
				<string>port</string>
				<string>preloaded</string>
				<string>processes</string>
				<string>reductions</string>
				<string>ref_state</string>
				<string>registry</string>
				<string>runtime</string>
				<string>wall_clock</string>
			</keywords>
			<keywords id="Reserved" scope="keyword">
				<string>apply_lambda</string>
				<string>module_info</string>
				<string>module_lambdas</string>
				<string>record</string>
				<string>record_index</string>
				<string>record_info</string>
			</keywords>
			<keywords id="Extras" scope="keyword">
				<string>badarg</string>
				<string>nocookie</string>
				<string>false</string>
				<string>fun</string>
				<string>true</string>
			</keywords>
			<keywords id="Signals" scope="keyword">
				<string>badsig</string>
				<string>kill</string>
				<string>killed</string>
				<string>exit</string>
				<string>normal</string>
			</keywords>
		</default>
		<state id="SingleComment" scope="comment.line">
			<begin>
				<regex>%</regex>
			</begin>
			<end>
				<regex>[\n\r]</regex>
			</end>
		</state>
		<state id="Character Literal" scope="language.constant.numeric.character">
			<begin>
				<regex>\$</regex>
			</begin>
			<end>
				<regex>\\?.</regex>
			</end>
		</state>
		<state id="String" scope="string.double">
			<begin>
				<regex>"</regex>
			</begin>
			<end>
				<regex>(?&lt;!\\)(\\\\)*"</regex>
			</end>
		</state>
		<state id="Quoted Atoms" scope="string.symbol">
			<begin>
				<regex>'</regex>
			</begin>
			<end>
				<regex>(?&lt;!\\)(\\\\)*'</regex>
			</end>
		</state>
		
		<state id="Block" type="block" foldable="yes" indent="yes" scope="meta.block">
			<begin><regex>(?:\-\&gt;)</regex></begin>
			<end><regex>(?:(?:(?:\;)|(?:\.))(?!\S))|(?:\s*(?=end\b))|(?:\s*(?=catch\b))</regex></end>
			<import/>
		</state>

		<state id="End Block" type="block" foldable="yes" indent="yes" scope="meta.block">
			<begin><regex>(?:\b(?:(?:of)|(?:if)|(?:begin))\b)</regex></begin>
			<end><regex>(?:\bend\b)</regex></end>
			<import/>
		</state>

	</states>
</syntax>
