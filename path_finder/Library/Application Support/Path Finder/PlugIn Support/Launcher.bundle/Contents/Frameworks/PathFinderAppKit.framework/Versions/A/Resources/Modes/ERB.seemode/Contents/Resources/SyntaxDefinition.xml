<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>

	<head>
		<name>ERB</name> <!-- The definitions title -->
		<charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@":]]></charsintokens> 
		<charsincompletion><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@</="!]]></charsincompletion> 
		<folding toplevel="3"/>
	</head>

	<states>

		<default id="Base" usesymbolsfrommode="HTML" useautocompletefrommode="HTML" scope="meta.default">

			<import mode="XML" keywords-only="yes"/>

			<state id="Ruby" usesymbolsfrommode="Ruby" useautocompletefrommode="Ruby" foldable="yes" scope="meta.default">
				<begin><regex>(?:&lt;%(?!%))|(?:&lt;%=)</regex></begin>
				<end><regex>(?:[-]?%&gt;)</regex></end>

				<keywords id="ERB Delimiter" useforautocomplete="no" scope="markup.processing.languageswitch">
					<regex>(-?%&gt;)</regex>
					<regex>(&lt;%=?)</regex>
				</keywords>

				<import mode="Ruby" keywords-only="yes"/>

				<state-link mode="Ruby" state="String with double quotes"/>
				<state-link mode="Ruby" state="String with single quotes"/>
				<state-link mode="Ruby" state="Heredoc"/>
				<state-link mode="Ruby" state="Heredoc Indented End"/>
				<state-link mode="Ruby" state="Percent Strings"/>
				<state-link mode="Ruby" state="Percent Strings {"/>
				<state-link mode="Ruby" state="Percent Strings ("/>
				<state-link mode="Ruby" state="Percent Strings &lt;"/>
				<state-link mode="Ruby" state="Percent Strings ["/>
				<state-link mode="Ruby" state="Backticks"/>
				<state-link mode="Ruby" state="Percent Execution"/>
				<state-link mode="Ruby" state="Percent Execution {"/>
				<state-link mode="Ruby" state="Percent Execution ("/>
				<state-link mode="Ruby" state="Percent Execution &lt;"/>
				<state-link mode="Ruby" state="Percent Execution ["/>
				<state-link mode="Ruby" state="Regexp"/>
				<state-link mode="Ruby" state="Percent Regex"/>
				<state-link mode="Ruby" state="Percent Regex {"/>
				<state-link mode="Ruby" state="Percent Regex ("/>
				<state-link mode="Ruby" state="Percent Regex &lt;"/>
				<state-link mode="Ruby" state="Percent Regex ["/>
				<state-link mode="Ruby" state="Percent Symbol"/>
				<state-link mode="Ruby" state="Percent Symbol {"/>
				<state-link mode="Ruby" state="Percent Symbol ("/>
				<state-link mode="Ruby" state="Percent Symbol &lt;"/>
				<state-link mode="Ruby" state="Percent Symbol ["/>
				<state-link mode="Ruby" state="Percent Array"/>
				<state-link mode="Ruby" state="Percent Array {"/>
				<state-link mode="Ruby" state="Percent Array ("/>
				<state-link mode="Ruby" state="Percent Array &lt;"/>
				<state-link mode="Ruby" state="Percent Array ["/>
				<state id="Singleline Comment" type="comment" scope="comment.line.double-slash">
					<begin><regex>#</regex></begin>
					<end><regex>(?:.(?=[\n\r]))|(?:.(?=%&gt;|-%&gt;))</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
				</state>

				<state id="Block" type="block" foldable="yes" scope="meta.block">
					<begin><regex>(?:(?:^|=)[ \t]*(?:(?:(?:if|unless|while|until)(?:[ \t]+|(?=\()))|(?:case[ \t]+\g'ruby_ident'[ \t]?)|(?:for[ \t]+\g'ruby_ident'[ \t]+in(?:[^\n\r]+do)?)|(?:case))|\b(?:(?:class(?:(?:[ \t]+(?'ruby_ident'(?'ruby_ident_part'[a-zA-Z_][a-zA-Z0-9_]*)(?:(?:\.|::)\g'ruby_ident_part')*)(?:[ \t]+&lt;[ \t]+\g'ruby_ident')?)|(?:[ \t]*&lt;&lt;)))|(?:module[ \t]+[a-zA-Z_][a-zA-Z0-9_]*)|\bdo\b(?:[ \t]*\|[^\n\r|]+\|)?|(?:def[ \t]+(?:(?'ruby_operator_methods'&amp;|\||\^|&lt;=&gt;|===|==|=~|&gt;&gt;|\?|\!|&gt;=|&gt;|&lt;=|\+@|\-@|\+|\-|\*\*|\*|/|%|&lt;&lt;|&lt;|~|\[\]|\[\]=)|\g'ruby_ident'\g'ruby_operator_methods'?))))</regex></begin>
					<end><regex>\bend\b|(?:.(?=%&gt;|-%&gt;))</regex></end>
					<import state="Ruby "/>
					<import mode="Ruby" keywords-only="yes"/>
				</state>

				<state id="BeginBlocks" type="block" foldable="yes" scope="meta.block.begin">
					<begin><regex>\bbegin\b</regex></begin>
					<end><regex>\bend(?:[ \t]+(?:while|if|unless|until))?\b|(?:.(?=%&gt;|-%&gt;))</regex></end>
					<import state="Ruby "/>
					<import mode="Ruby" keywords-only="yes"/>
				</state>

				<!-- this should not match normal hash literals. most commonly used in || {} in rails -->

				<state id="CurlyBlocks" type="block" foldable="yes" scope="meta.block.curly">
					<begin><regex>{(?:[ \t]*\|[^\n\r|]+\|)?</regex></begin>
					<end><regex>}|(?:.(?=%&gt;|-%&gt;))</regex></end>
					<import state="Ruby "/>
					<import mode="Ruby" keywords-only="yes"/>
				</state>


			</state>

			<state id="RubyOneLineERB" usesymbolsfrommode="Ruby" useautocompletefrommode="Ruby" foldable="no" scope="comment.line">
				<begin><regex>^%</regex></begin>
				<end><regex>[\n\r]</regex></end>

				<import state="Ruby"/>
				<import mode="Ruby" keywords-only="yes"/>

				<keywords id="ERB Delimiter One Line" useforautocomplete="no" scope="meta.tag.erbstart">
					<regex>(^%)</regex>
				</keywords>

			</state>

			<!--  This is the "we do a complete HTML mode and import Ruby everywhere" section -->
			<state id="Comment" type="comment" scope="markup.comment">
				<begin><regex>&lt;!--</regex><autoend>--&gt;</autoend></begin>
				<end><regex>--&gt;</regex></end>
				<keywords id="SGML Double Dash" useforautocomplete="no" scope="meta.invalid.sgmlcomment">
					<regex>(?&lt;!\!)(--)(?!&gt;)</regex>
				</keywords>
				<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
				<state-link state="Ruby"/>
			</state>
			<state id="CDATA" foldable="yes" scope="markup.inline.cdata">
				<begin>
					<regex>&lt;!\s*\[CDATA\s*\[</regex>
					<autoend>\]\]&gt;</autoend>
				</begin>
				<end>
					<regex>\]\s*\]\s*&gt;</regex>
				</end>
				<state-link state="Ruby"/>
			</state>
			<state id="Doctype" foldable="no" scope="markup.declaration">
				<begin>
					<regex>&lt;!</regex><autoend>&gt;</autoend>
				</begin>
				<end>
					<regex>&gt;</regex>
				</end>
				<state id="String" type="string" scope="markup.declaration.string.double">
					<begin><regex>"</regex></begin>
					<end><regex>"</regex></end>
					<state-link state="Ruby"/>
				</state>
				<state id="SingleString" type="string" scope="markup.declaration.string.single">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>
					<state-link state="Ruby"/>
				</state>
				<state id="Doctype Block" type="block" foldable="yes" indent="yes" scope="meta.block.square">
					<begin><regex>\[</regex><autoend>\]</autoend></begin>
					<end><regex>]</regex></end>
					<import/>
				</state>
				<state-link state="Ruby"/>
			</state>
			<state id="Escape" foldable="no" scope="markup.processing">
				<begin>
					<regex>&lt;\?</regex><autoend>\?&gt;</autoend>
				</begin>
				<end>
					<regex>\?&gt;</regex>
				</end>
				<state id="ProcessingString" type="string" scope="markup.processing.attribute.value.string">
					<begin><regex>"</regex></begin>
					<end><regex>"</regex></end>
					<state-link state="Ruby"/>
				</state>
				<state id="ProcessingSingleString" type="string" scope="markup.processing.attribute.value.string">
					<begin><regex>'</regex></begin>
					<end><regex>'</regex></end>
					<state-link state="Ruby"/>
				</state>
				<state-link state="Ruby"/>
			</state>
			<state id="Inline CSS" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" foldable="yes" indent="yes" scope="meta.block.css">
				<begin>
					<regex>&lt;[ \t]*(?i)style[^&gt;]*&gt;</regex>
					<autoend>&lt;/style&gt;</autoend>
				</begin>
				<end>
					<regex>(?i)&lt;[ \t]*/[ \t]*style[ \t]*&gt;</regex>
				</end>
				<state-link state="Ruby"/>

				<import mode="CSS"/>
				<state id="CSSInside curly brackets" foldable="yes" indent="yes" scope="meta.block.curly">
					<begin>
						<string>{</string>
						<autoend>}</autoend>
					</begin>
					<end>
						<regex>}</regex>
					</end>
					<import mode="CSS" state="Inside curly brackets" keywords-only="yes"/>
					<state id="CSS Attribute state" scope="meta.block.attribute">
						<begin>
							<string>:</string>
						</begin>
						<end>
							<regex>(;|.(?=})|[\n\r])</regex>
						</end>
						<import mode="CSS" state="Attribute state" keywords-only="yes"/>
						<state-link state="Ruby"/>
						<state-link state="CSSAutodocComment"/>
						<state-link state="CSSComment"/>
						<state-link state="CSSString"/>
						<state-link state="CSSSingleString"/>
					</state>
					<state-link state="CSSAutodocComment"/>
					<state-link state="CSSComment"/>
					<state-link state="CSSString"/>
					<state-link state="CSSSingleString"/>
					<state-link state="Ruby"/>
				</state>

				<import keywords-only="yes"/>

				<state id="CSSRules" scope="style.at-rule">
					<begin>
						<regex>^@[-\w_]+</regex>
					</begin>
					<end>
						<regex>.(?=[{\n\r])</regex>
					</end>
				</state>

				<state id="CSSAutodocComment" type="comment" scope="style.comment.block.documentation">
					<begin>
						<string>/\*"</string>
						<autoend>"\*/</autoend>
					</begin>
					<end>
						<regex>"\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Ruby"/>
				</state>
				<state id="CSSComment" type="comment" scope="style.comment.block">
					<begin>
						<string>/\*</string>
						<autoend>\*/</autoend>
					</begin>
					<end>
						<regex>\*/</regex>
					</end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Ruby"/>
				</state>
				<state id="CSSString" type="string" scope="style.value.string.double">
					<begin>
						<string>"</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*"</regex>
					</end>
					<state-link state="Ruby"/>
				</state>
				<state id="CSSSingleString" type="string" scope="style.value.string.single">
					<begin>
						<string>'</string>
					</begin>
					<end>
						<regex>(?&lt;!\\)(\\\\)*'</regex>
					</end>
					<state-link state="Ruby"/>
				</state>

			</state>


			<state id="Inline Javascript" usesymbolsfrommode="Javascript" useautocompletefrommode="Javascript" foldable="yes" scope="meta.block.js">
				<begin>
					<regex>&lt;(?i)script[^&gt;]*&gt;</regex><autoend>&lt;/script&gt;</autoend>
				</begin>
				<end>
					<regex>&lt;(?i)/script[^&gt;]*&gt;</regex>
				</end>
				<import mode="Javascript" keywords-only="yes"/>
				<import mode="XML" keywords-only="yes"/>
				<state-link state="Ruby"/>

				<state id="JSAutodocComment" type="comment" scope="comment.block.documentation.js">
					<begin><regex>/\*"</regex></begin>
					<end><regex>"\*/</regex></end>
					<state-link state="Ruby"/>
				</state>

				<state id="JSComment" type="comment" scope="comment.block.js">
					<begin><regex>/\*</regex><autoend>\*/</autoend></begin>
					<end><regex>\*/</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Ruby"/>
				</state>

				<state id="JSSingleComment" type="comment" scope="comment.line.double-slash.js">
					<begin><regex>//</regex></begin>
					<end><regex>[\n\r]|.(?=&lt;(?i)/script\s*&gt;)</regex></end>
					<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>
					<state-link state="Ruby"/>
				</state>

				<state id="JSRegular Expressions" type="string" scope="string.regex.js">
					<begin><regex>(?&lt;![&lt;/])/.*?[^\\](?=/[^\n\r]*(?:;|\)|,|[\n\r]))</regex></begin>
					<end><regex>/[cgimosx]*</regex></end>
					<state-link state="Ruby"/>
				</state>

				<state id="JSString" type="string" scope="string.double.js">
					<begin><regex>"</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*"</regex></end>
					<state-link state="Ruby"/>
				</state>

				<state id="JSSingleString" type="string" scope="string.single.js">
					<begin><regex>'</regex></begin>
					<end><regex>(?&lt;!\\)(\\\\)*'</regex></end>
					<state-link state="Ruby"/>
				</state>

				<state id="JSBlock" type="block" foldable="yes" indent="yes" scope="meta.block.curly.js">
					<begin><regex>{</regex><autoend>}</autoend></begin>
					<end><regex>}</regex></end>
					<import mode="Javascript" keywords-only="yes"/>
					<import mode="ERB" state="Inline Javascript"/>
				</state>
			</state>

			<state id="Single Tag with Ruby State" foldable="no" scope="meta.default">
				<begin>
					<regex>&lt;\s*[^/?!][-:_\w]*(?=[^&lt;&gt;]*&lt;%.+%&gt;[^&gt;]*[^&gt;]*/&gt;)</regex>
				</begin>
				<end>
					<regex>/[ \t]*&gt;</regex>
				</end>
				<import/>
				<keywords id="Single Tags with Ruby" useforautocomplete="no" scope="markup.tag">
					<regex>(&lt;[^&gt;]*)</regex>
					<regex>(\A[^&lt;&gt;]*&gt;)</regex>
				</keywords>
				<keywords id="Attributes in Single Tags with Ruby" useforautocomplete="no" scope="markup.tag.attribute.name">
					<regex>([\w-]*)(?=[ \t]*=[^&lt;]+)</regex>
				</keywords>
				<keywords id="Strings in Single Tags with Ruby" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
					<regex>=[ \t]*("[^"]*"|'[^']*')(?=[^&lt;]*)</regex>
					<regex>([^"]*")(?=[ \t]*&gt;)</regex>
				</keywords>
			</state>

			<state id="Tag with Ruby State" foldable="yes" scope="meta.block.tag.erb">
				<begin>
					<regex>&lt;\s*(?'erbtagstatename'[^/?!][-:_\w]*)(?'trimmedstart'[^&lt;&gt;]*&lt;%.+%&gt;[^&gt;]*&gt;)</regex> <!--  Used "trimmedstart regex group, to start searching earlier" -->
					<autoend>&lt;/\g&lt;erbtagstatename&gt;&gt;</autoend>
				</begin>
				<end>
					<regex>&lt;\s*/\s*(?#see-insert-start-group:erbtagstatename)\s*&gt;</regex>
				</end>
				<import/>
				<keywords id="Tags with Ruby" useforautocomplete="no" scope="markup.tag">
					<regex>(&lt;[^&gt;]*&gt;?)</regex>
					<regex>(\A[^&lt;&gt;]*&gt;)</regex>
				</keywords>
				<keywords id="Attributes in Tags with Ruby" useforautocomplete="no" scope="markup.tag.attribute.name">
					<regex>([\w-]*)(?=[ \t]*=[^&lt;]+)</regex>
				</keywords>
				<keywords id="Strings in Tags with Ruby" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
					<regex>=[ \t]*("[^"]*"|'[^']*')(?=[^&lt;]*)</regex>
					<regex>([^"]*")(?=[ \t]*&gt;)</regex>
				</keywords>
			</state>

			<state id="Tag State Ruby" foldable="yes" indent="yes" scope="meta.default">
				<begin>
					<regex>&lt;\s*(?'xmltagstatename'[^/?!][-:_\w]*)\s*(?:[-:_\w]+=(?:"[^"]*"|'[^']*'|\w+)\s*)*\s*&gt;</regex>
					<autoend>&lt;/\g&lt;xmltagstatename&gt;&gt;</autoend>
				</begin>
				<end>
					<regex>&lt;\s*/\s*(?#see-insert-start-group:xmltagstatename)\s*&gt;</regex>
				</end>
				<import mode="XML" keywords-only="yes"/>
				<import/>
			</state>
		</default>
	</states>

</syntax>
