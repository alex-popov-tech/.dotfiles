<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "symbol.dtd">

<symbols>

	<symbol id="enum" symbol="e_#a51c9b" indentation="0" ignoreblocks="yes">
		<regex>^[^\S\n]*enum\s+([^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+(?:&lt;[^&gt;\n]+&gt;)?\s*(?:(?::\s*[^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+\s*)(?:,\s*[^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+\s*)*)?)\{</regex>
		<find>[ \t]+</find>
		<replace> </replace>
	</symbol>

	<symbol id="class" symbol="C" indentation="0" ignoreblocks="yes">
		<regex>^[^\S\n]*class\s+([^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+(?:&lt;[^&gt;\n]+&gt;)?\s*(?:(?::\s*[^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+\s*)(?:,\s*[^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+\s*)*)?)\{</regex>
		<find>[ \t]+</find>
		<replace> </replace>
	</symbol>

	<symbol id="struct" symbol="S_#a51c9b" indentation="0" ignoreblocks="yes">
		<regex>^[^\S\n]*struct\s+([^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+(?:&lt;[^&gt;\n]+&gt;)?\s*(?:(?::\s*[^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+\s*)(?:,\s*[^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+\s*)*)?)\{</regex>
		<find>[ \t]+</find>
		<replace> </replace>
	</symbol>

	<symbol id="extension" symbol="ex_#a51c9b" indentation="0" ignoreblocks="yes">
		<regex>^[^\S\n]*extension\s+([^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+(?:&lt;[^&gt;\n]+&gt;)?\s*(?:(?::\s*[^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+\s*)(?:,\s*[^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+\s*)*)?)\{</regex>
		<find>[ \t]+</find>
		<replace> </replace>
	</symbol>

	<symbol id="Init" symbol="i()_#a51c9b" indentation="1" ignoreblocks="yes">
		<regex>^[^\S\n]*(?:(?:public|private|internal|@objc)\s+)*(init\s*(?:&lt;[^&gt;\n]+&gt;)?\([^\)\n]+\))</regex>
		<postprocess>
			<find>\([^\)]*\)</find>
			<replace>()</replace>
			<find>[\n\r]</find>
			<replace> </replace>
			<find>[ \t]+</find>
			<replace> </replace>
		</postprocess>
	</symbol>

	<symbol id="protocol" symbol="P_#a51c9b" indentation="0" ignoreblocks="yes">
		<regex>^[^\S\n]*(?:(?:public|private|internal|@objc)\s+)*protocol\s+([^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+(?:&lt;[^&gt;\n]+&gt;)?\s*)\{</regex>
		<find>[ \t]+</find>
		<replace> </replace>
	</symbol>

	<symbol id="Init" symbol="i()_#a51c9b" indentation="1" ignoreblocks="yes">
		<regex>^[^\S\n]*(?:(?:public|private|internal|@objc)\s+)*((?:de)?init\s*(?:&lt;[^&gt;\n]+&gt;)?\([^\)\n]+\))</regex>
		<postprocess>
			<find>\([^\)]*\)</find>
			<replace>()</replace>
			<find>[\n\r]</find>
			<replace> </replace>
			<find>[ \t]+</find>
			<replace> </replace>
		</postprocess>
	</symbol>

	<symbol id="Functions" symbol="f()_#6AB18D" indentation="1" ignoreblocks="yes">
		<regex>^(?:[^\S\n]*)(?:(?:public|private|internal|@objc|override)\s+)*?[^\S\n]*func\s+([^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+(?:&lt;[^&gt;\n]+&gt;)?\([^\)\n]*\))</regex>
		<postprocess>
			<find>\([^\)]*\)</find>
			<replace>()</replace>
			<find>[\n\r]</find>
			<replace> </replace>
			<find>[ \t]+</find>
			<replace> </replace>
		</postprocess>
	</symbol>

	<symbol id="Class Functions" symbol="c()" indentation="1" ignoreblocks="yes">
		<regex>^(?:[^\S\n]*override)?[^\S\n]*class[^\S\n]*func\s+([^-*+#:.,\(&lt;&gt;\{\[\]}\)\s]+(?:&lt;[^&gt;\n]+&gt;)?\([^\)\n]*\))</regex>
		<postprocess>
			<find>\([^\)]*\)</find>
			<replace>()</replace>
			<find>[\n\r]</find>
			<replace> </replace>
			<find>[ \t]+</find>
			<replace> </replace>
		</postprocess>
	</symbol>


	<!-- TODO: exchange Pragma Marks recognition with whatever the language has to show labels and separators -->
	<symbol id="Pragma Marks" font-weight="bold" indentation="0" ignoreblocks="yes" show-in-comments="yes">
		<regex>^([^\S\n]*// (?i)(:?mark|todo|fixme):(?:[^\S\n]|-)*[^\n]*)$</regex>
		<postprocess>
			<find>^([^\S\n]*// (?i)mark:(?:[^\S\n]|-)*)</find> <!-- An empty string places a separator -->
			<replace></replace>
		</postprocess>
	</symbol>

	<symbol id="Versioning Conflict" font-weight="bold" image="SymbolWarn" indentation="0" ignoreblocks="no">
		<regex>^&lt;&lt;&lt;&lt;&lt;&lt;&lt;([\n\r]|.)*?======([\n\r]|.)*?&gt;&gt;&gt;&gt;&gt;&gt;&gt;</regex>
		<postprocess>
			<find>.*</find>
			<replace>Versioning conflict!</replace>
		</postprocess>
	</symbol>
</symbols>
