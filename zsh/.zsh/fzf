[ -f "/usr/local/opt/fzf/shell/completion.zsh" ] && source /usr/local/opt/fzf/shell/completion.zsh
[ -f "/usr/local/opt/fzf/shell/key-bindings.zsh" ] && source /usr/local/opt/fzf/shell/key-bindings.zsh

fzf_opts=(
  '--border'
  '--height 80%'
  '--reverse'
  '--multi'
  '--bind "ctrl-a:select-all"'
  '--bind "ctrl-y:execute-silent(echo {+} | pbcopy)"'
  '--bind "ctrl-e:execute(echo {+} | xargs -o nvim)"'
  '--color=fg:#ffd7af,bg:#282828,hl:#5f87af'
  '--color=fg+:#d0d0d0,bg+:#282828,hl+:#5fd7ff'
  '--color=info:#282828,prompt:#d7005f,pointer:#af5fff'
  '--preview "([[ -f {} ]] && (bat --style=changes,numbers --color=always {} || cat {})) || ([[ -d {} ]] && (exa --icons --tree --level=2 {} | less)) || echo {} 2> /dev/null | head -200"'
)
export FZF_DEFAULT_COMMAND="fd --hidden --follow --exclude '.git' --exclude 'node_modules'"
export FZF_DEFAULT_OPTS=$fzf_opts
# use just <tab> to trigger fzf - no zsh default autocompletion needed
export FZF_COMPLETION_TRIGGER=''

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

# (EXPERIMENTAL) Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf "$@" --preview 'tree -C {} | head -200' ;;
    export|unset) fzf "$@" --preview "eval 'echo \$'{}" ;;
    ssh)          fzf "$@" --preview 'dig {}' ;;
    *)            fzf "$@" ;;
  esac
}

# interactive cd
unalias g 2> /dev/null
g() {
  if [ $# -eq 0 ] ; then
    path_to_cd=$(fd --type d --hidden --follow --exclude .git 2>/dev/null | fzf )
    [[ -z "$path_to_cd" ]] && return || cd "$path_to_cd"
  else
    cd $@
  fi
}

# interactive edit
unalias e 2> /dev/null
e() {
  if [ $# -eq 0 ] ; then
    path_to_cd=$(fd --type f --hidden --follow --exclude .git 2>/dev/null | fzf )
    [[ -z "$path_to_cd" ]] && return || n "$path_to_cd"
  else
    cd $@
  fi
}
